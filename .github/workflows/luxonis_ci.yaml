name: Luxonis CI

on:
  workflow_call:
    inputs:
      runners:
        description: 'The runners to use for the matrix strategy as a JSON string'
        required: true
        type: string
      python-versions:
        description: 'The Python versions to use for the matrix strategy as a JSON string'
        required: true
        type: string
      main-runner:
        description: 'The name of the main runner'
        required: false
        type: string
        default: 'ubuntu-latest'
      main-python-version:
        description: 'The Python version of the main runner'
        required: false
        type: string
        default: '3.10'
      module:
        description: 'Name of the package to test'
        required: true
        type: string
      docstring-format:
        description: 'The format of the docstrings'
        required: false
        type: string
        default: 'restructuredtext'
      type-check:
        description: 'Whether to run type checking'
        required: false
        type: boolean
        default: false
      luxonis-ml-bucket:
        description: 'The bucket to use for LuxonisML remote storage'
        required: false
        type: string
        default: 'luxonis-test-bucket'
      labeler:
        description: 'Whether to use automatic labeler for PRs'
        required: false
        type: boolean
        default: false
      labeler-config:
        description: 'Path to the labeler configuration file'
        required: false
        type: string
        default: .github/labeler.yaml
      semgrep:
        description: 'Whether to run Semgrep'
        required: false
        type: boolean
        default: false
      trigger:
        description: >
          The trigger for the workflow.
          Can be either "pull_request" or "push"
        required: true
        type: string

    secrets:
      CODECOV_TOKEN:
        required: false
      GCP_CREDENTIALS:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_S3_ENDPOINT_URL:
        required: false
      ROBOFLOW_API_KEY:
        required: false


jobs:
  auto-assigner:
    if: ${{ inputs.trigger == 'pull_request' }}
    runs-on: ubuntu-latest

    steps:
      - name: Auto-assign
        uses: toshimaru/auto-author-assign@v2.1.1

  labeler:
    if: ${{ inputs.labeler && inputs.trigger == 'pull_request' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Labeler
        uses: actions/labeler@v5
        with:
          configuration-path: ${{ inputs.labeler-config }}

  pre-commit:
    if: ${{ inputs.trigger == 'pull_request' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Install pre-commit
        run: python3 -m pip install 'pre-commit<4.0.0'

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  docs:
    if: ${{ inputs.trigger == 'pull_request' }}
    needs: pre-commit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Install pydoctor
        run: pip install pydoctor

      - name: Build docs
        run: pydoctor --docformat=${{ inputs.docstring-format }} ${{ inputs.module }}

  type-check:
    if: ${{ inputs.trigger == 'pull_request' }}
    needs: pre-commit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        if: ${{ inputs.type-check }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Python
        if: ${{ inputs.type-check }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.main-python-version }}
          cache: pip

      - name: Install dependencies
        if: ${{ inputs.type-check }}
        run: pip install -e .[dev]

      - name: Pyright check
        if: ${{ inputs.type-check }}
        uses: jakebailey/pyright-action@v2
        with:
          level: warning
          warnings: true
          python-version: ${{ inputs.main-python-version }}
          project: pyproject.toml

      - name: Pyleft Check
        if: ${{ inputs.type-check }}
        run: pyleft ${{ inputs.module }} --exclude __main__.py

  semgrep:
    if: ${{ github.actor != 'dependabot[bot]' && inputs.trigger == 'pull_request' }})
    needs: pre-commit
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout
        if: ${{ inputs.semgrep }}
        uses: actions/checkout@v4

      - name: Perform Semgrep Analysis
        if: ${{ inputs.semgrep }}
        run: >
          semgrep scan
            -q
            --sarif
            --config auto
            --config "p/secrets" . > semgrep-results.sarif

      - name: Pretty-Print SARIF Output
        if: ${{ inputs.semgrep }}
        run: |
          jq . semgrep-results.sarif > formatted-semgrep-results.sarif || echo "{}"
          echo "Formatted SARIF Output (First 20 lines):"
          head -n 20 formatted-semgrep-results.sarif || echo "{}"

      - name: Validate JSON Output
        if: ${{ inputs.semgrep }}
        run: |
          if ! jq empty formatted-semgrep-results.sarif > /dev/null 2>&1; then
            echo "⚠️ Semgrep output is not valid JSON. Skipping annotations."
            exit 0
          fi

      - name: Add PR Annotations for Semgrep Findings
        if: ${{ inputs.semgrep }}
        run: |
          total_issues=$(jq '.runs[0].results | length' formatted-semgrep-results.sarif)
          if [[ "$total_issues" -eq 0 ]]; then
            echo "✅ No Semgrep issues found!"
            exit 0
          fi

          jq -c '.runs[0].results[]' formatted-semgrep-results.sarif | while IFS= read -r issue; do
            file=$(echo "$issue" | jq -r '.locations[0].physicalLocation.artifactLocation.uri')
            line=$(echo "$issue" | jq -r '.locations[0].physicalLocation.region.startLine')
            message=$(echo "$issue" | jq -r '.message.text')

            if [[ -n "$file" && -n "$line" && -n "$message" ]]; then
              echo "::error file=$file,line=$line,title=Semgrep Issue::${message}"
            fi
          done

  tests:
    strategy:
      matrix:
        os: ${{ fromJson(inputs.runners) }}
        python-version: ${{ fromJson(inputs.python-versions) }}

    if: ${{ inputs.trigger == 'pull_request' }}
    needs: [type-check, semgrep]
    runs-on: ${{ matrix.os }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_S3_ENDPOINT_URL: ${{ secrets.AWS_S3_ENDPOINT_URL }}
      ROBOFLOW_API_KEY: ${{ secrets.ROBOFLOW_API_KEY }}
      IS_MAIN_RUNNER: ${{ inputs.main-runner == matrix.os && inputs.main-python-version == matrix.python-version }}
      LUXONISML_BUCKET: ${{ inputs.luxonis-ml-bucket }}
      GHC_ENABLED: ${{ secrets.GCP_CREDENTIALS != null }}
      CODECOV_ENABLED: ${{ secrets.CODECOV_TOKEN != null }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install the package
        run: pip install -e .[dev]

      - name: Authenticate to Google Cloud
        if: ${{ env.GHC_ENABLED }}
        id: google-auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          create_credentials_file: true
          export_environment_variables: true
          token_format: access_token

      - name: Run pytest
        run: pytest --cov --junitxml=junit.xml -o junit_family=legacy -vv -x

      - name: Upload test results to Codecov
        if: ${{ env.IS_MAIN_RUNNER && env.CODECOV_ENABLED }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Upload coverage results to Codecov
        if: ${{ env.IS_MAIN_RUNNER && env.CODECOV_ENABLED }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Upload coverage as artifact
        if: ${{ env.IS_MAIN_RUNNER && env.CODECOV_ENABLED }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml
          overwrite: true

  update-base-report:
    if: ${{ inputs.trigger == 'push' }}
    runs-on: ubuntu-latest

    env:
      CODECOV_ENABLED: ${{ secrets.CODECOV_TOKEN != null }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Download artifacts
        if: ${{ env.CODECOV_ENABLED }}
        uses: dawidd6/action-download-artifact@v7
        with:
          name: coverage
          path: coverage.xml
          workflow: luxonis_ci.yaml

      - name: Upload coverage results to Codecov
        if: ${{ env.CODECOV_ENABLED }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
