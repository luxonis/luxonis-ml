name: luxonis-ml-ci

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        description: "Python version to use for the virtual environment"
        default: "3.8"
      os:
        required: false
        type: string
        description: "Operating system versions to run tests on"
        default: "ubuntu-latest"
      src-dir:
        required: true
        type: string
        description: "Source directory to monitor for coverage report"


jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      os-matrix: ${{ steps.set-matrix.outputs.os-matrix }}
      os-default: ${{ steps.set-matrix.outputs.os-default }}
      python-matrix: ${{ steps.set-matrix.outputs.python-matrix }}
      python-default: ${{ steps.set-matrix.outputs.python-default }}
    steps:
      - id: set-matrix
        run: |
          python_list=$(echo -n "${{ inputs.python-version }}" | jq -R -s -c 'split(",")')
          os_list=$(echo -n "${{ inputs.os }}"| jq -R -s -c 'split(",")')

          os_default=$(echo $os_list | jq -r '.[0]')
          python_default=$(echo $python_list | jq -r '.[0]')

          echo "::set-output name=os-matrix::$os_list"
          echo "::set-output name=os-default::$os_default"
          echo "::set-output name=python-matrix::$python_list"
          echo "::set-output name=python-default::$python_default"

  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}

    - uses: pre-commit/action@v3.0.0

  tests:
    needs:
      - setup
      - pre-commit
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.setup.outputs.os-matrix) }}
        python-version: ${{ fromJson(needs.setup.outputs.python-matrix) }}

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip

    - name: Install package
      run: pip install -e .[dev]

    - name: Run pytest
      uses: pavelzw/pytest-action@v2
      with:
        emoji: false
        custom-arguments: --cov ${{ github.event.inputs.src-dir }} --cov-report xml

    - name: Generate coverage badge
      uses: tj-actions/coverage-badge-py@v2
      if: ${{ matrix.os == needs.setup.outputs.os-default && matrix.python-version == needs.setup.outputs.python-default }}
      with:
        output: media/coverage_badge.svg

    - name: Generate coverage report
      uses: orgoro/coverage@v3.1
      if: ${{ matrix.os == needs.setup.outputs.os-default && matrix.python-version == needs.setup.outputs.python-default && github.event_name == 'pull_request' }}
      with:
          coverageFile: coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}

    - name: Commit coverage badge
      if: ${{ matrix.os == needs.setup.outputs.os-default && matrix.python-version == needs.setup.outputs.python-default }}
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git diff --quiet media/coverage_badge.svg || {
          git add media/coverage_badge.svg
          git commit -m "[Automated] Updated coverage badge"
        }

    - name: Push changes
      uses: ad-m/github-push-action@master
      if: ${{ matrix.os == needs.setup.outputs.os-default && matrix.python-version == needs.setup.outputs.python-default }}
      with:
        branch: ${{ github.head_ref }}
