[project]
name = "luxonis-ml"
description = "MLOps tools for training models for Luxonis devices"
readme = "README.md"
requires-python = ">=3.8"
license = { file = "LICENSE" }
authors = [{ name = "Luxonis", email = "support@luxonis.com" }]
maintainers = [{ name = "Luxonis", email = "support@luxonis.com" }]
keywords = ["ml", "ops", "camera", "luxonis", "oak"]
dynamic = ["dependencies", "optional-dependencies", "version"]
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Development Status :: 4 - Beta",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Image Processing",
  "Topic :: Scientific/Engineering :: Image Recognition",
]

[project.scripts]
luxonis_ml = "luxonis_ml.__main__:app"

[project.urls]
repository = "https://github.com/luxonis/luxonis-ml"
issues = "https://github.com/luxonis/luxonis-ml/issues"

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]

[tool.setuptools.dynamic]
dependencies = { file = ["luxonis_ml/utils/requirements.txt"] }
version = {attr = "luxonis_ml.__version__"}

[tool.setuptools.dynamic.optional-dependencies]
data = { file = ["luxonis_ml/data/requirements.txt"] }
utils = { file = ["luxonis_ml/utils/requirements.txt"] }
tracker = { file = ["luxonis_ml/tracker/requirements.txt"] }
embedd = { file = ["luxonis_ml/embeddings/requirements.txt"] }
nn_archive = { file = ["luxonis_ml/nn_archive/requirements.txt"] }

[tool.setuptools.dynamic.optional-dependencies.all]
file = [
    "luxonis_ml/data/requirements.txt",
    "luxonis_ml/utils/requirements.txt",
    "luxonis_ml/tracker/requirements.txt",
    "luxonis_ml/embeddings/requirements.txt",
    "luxonis_ml/nn_archive/requirements.txt"
]

[tool.setuptools.dynamic.optional-dependencies.dev]
file = [
    "luxonis_ml/data/requirements.txt",
    "luxonis_ml/utils/requirements.txt",
    "luxonis_ml/tracker/requirements.txt",
    "luxonis_ml/embeddings/requirements.txt",
    "luxonis_ml/nn_archive/requirements.txt",
    "requirements-dev.txt"
]

[tool.ruff]
target-version = "py38"
line-length = 79
indent-width = 4

[tool.ruff.lint]
ignore = ["F403", "B028", "B905", "D1", "W191"]
select = ["E4", "E7", "E9", "F", "W", "B", "I"]

[tool.docformatter]
black = true
style = "epytext"
wrap-summaries = 72
wrap-descriptions = 72

[tool.pyright]
typeCheckingMode = "basic"
reportMissingTypeStubs = "none"
reportPrivateImportUsage = "none"
reportPrivateUsage = "none"
reportIncompatibleVariableOverride = "none"
reportIncompatibleMethodOverride = "none"
reportUnnecessaryIsInstance = "none"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--disable-warnings"

[tool.coverage.run]
omit = [
    "luxonis_ml/embeddings/*",
    "luxonis_ml/utils/logging.py",
    "luxonis_ml/tracker/*",
    "**/__main__.py"
]

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "def __rich_repr__",
    "def __str__",
    "assert",
    "raise AssertionError",
    "raise NotImplementedError",
    "except ImportError",
    "@abstractmethod",
    "@overload",
    "(sys\\.)?exit\\(",
    "exit\\(",
    "cv2\\.imshow",
    "cv2\\.waitKey",
    "logger\\.",
]
