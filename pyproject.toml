[project]
name = "luxonis-ml"
description = "MLOps tools for training models for Luxonis devices"
readme = "README.md"
requires-python = ">=3.8"
license = { file = "LICENSE" }
authors = [{ name = "Luxonis", email = "support@luxonis.com" }]
maintainers = [{ name = "Luxonis", email = "support@luxonis.com" }]
keywords = ["ml", "ops", "camera", "luxonis", "oak"]
dynamic = ["dependencies", "optional-dependencies", "version"]
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Development Status :: 4 - Beta",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Image Processing",
  "Topic :: Scientific/Engineering :: Image Recognition",
]

[project.scripts]
luxonis_ml = "luxonis_ml.__main__:app"

[project.urls]
repository = "https://github.com/luxonis/luxonis-ml"
issues = "https://github.com/luxonis/luxonis-ml/issues"

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]

[tool.setuptools.dynamic]
dependencies = { file = ["luxonis_ml/utils/requirements.txt"] }
version = { attr = "luxonis_ml.__version__" }

[tool.setuptools.dynamic.optional-dependencies]
data = { file = ["luxonis_ml/data/requirements.txt"] }
utils = { file = ["luxonis_ml/utils/requirements.txt"] }
tracker = { file = ["luxonis_ml/tracker/requirements.txt"] }
embedd = { file = ["luxonis_ml/embeddings/requirements.txt"] }
nn_archive = { file = ["luxonis_ml/nn_archive/requirements.txt"] }

roboflow = { file = ["extra_requirements/roboflow.txt"] }
gcs = { file = ["extra_requirements/gcs.txt"] }
s3 = { file = ["extra_requirements/s3.txt"] }
mlflow = { file = ["extra_requirements/mlflow.txt"] }

[tool.setuptools.dynamic.optional-dependencies.all]
file = [
  "luxonis_ml/data/requirements.txt",
  "luxonis_ml/utils/requirements.txt",
  "luxonis_ml/tracker/requirements.txt",
  "luxonis_ml/embeddings/requirements.txt",
  "luxonis_ml/nn_archive/requirements.txt",
  "extra_requirements/roboflow.txt",
  "extra_requirements/gcs.txt",
  "extra_requirements/s3.txt",
  "extra_requirements/mlflow.txt",
]

[tool.setuptools.dynamic.optional-dependencies.dev]
file = [
  "luxonis_ml/data/requirements.txt",
  "luxonis_ml/utils/requirements.txt",
  "luxonis_ml/utils/requirements-fsspec.txt",
  "luxonis_ml/tracker/requirements.txt",
  "luxonis_ml/embeddings/requirements.txt",
  "luxonis_ml/nn_archive/requirements.txt",
  "extra_requirements/roboflow.txt",
  "extra_requirements/gcs.txt",
  "extra_requirements/s3.txt",
  "extra_requirements/mlflow.txt",
  "requirements-dev.txt",
]

[tool.ruff]
target-version = "py38"
line-length = 79
indent-width = 4

[tool.ruff.lint]
select = [
  "ANN",
  "B",
  "C4",
  "DTZ",
  "E",
  "ERA",
  "F",
  "FLY",
  "FURB",
  "I",
  "ICN",
  "ICN",
  "INP",
  "INT",
  "ISC",
  "NPY",
  "PERF101",
  "PERF102",
  "PERF402",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "T10",
  "T20",
  "TID",
  "TRY",
  "UP",
  "W",
]
ignore = [
  "ANN002",
  "ANN003",
  "ANN204",
  "ANN401",
  "D1",
  "E501",
  "F403",
  "ICN002",
  "NPY002",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  "PLR2004",
  "PLW2901",
  "PTH123",
  "RET503",
  "RUF012",
  "S101",
  "S311",
  "S603",
  "SIM108",
  "TRY003",
  "W191",
]
unfixable = ["B905", "PLC0208"]
exclude = ["luxonis_ml/embeddings/*", "examples/*"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ANN201"]
"__main__.py" = ["ANN201"]
"tools/benchmark.py" = ["T201"]

[tool.docformatter]
black = true
style = "epytext"
wrap-summaries = 72
wrap-descriptions = 72

[tool.pyright]
exclude = [
  "luxonis_ml/embeddings",
  "luxonis_ml/tracker",
  "examples",
  "__main__.py",
]
typeCheckingMode = "basic"
reportMissingTypeStubs = "none"
reportPrivateImportUsage = "none"
reportPrivateUsage = "none"
reportIncompatibleVariableOverride = "none"
reportIncompatibleMethodOverride = "none"
reportUnnecessaryIsInstance = "none"

[tool.pyleft]
paths = ["luxonis_train"]
exclude = [
  "luxonis_ml/embeddings",
  "luxonis_ml/tracker",
  "examples",
  "__main__.py",
]

[tool.pytest]
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL NUMBER"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--disable-warnings"

[tool.coverage.run]
omit = [
  "luxonis_ml/embeddings/*",
  "luxonis_ml/utils/logging.py",
  "luxonis_ml/tracker/*",
  "**/__main__.py",
]
source = ["luxonis_ml", "tests"]

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  "def __rich_repr__",
  "def __str__",
  "assert",
  "raise AssertionError",
  "raise NotImplementedError",
  "except ImportError",
  "@abstractmethod",
  "@overload",
  "(sys\\.)?exit\\(",
  "exit\\(",
  "cv2\\.imshow",
  "cv2\\.waitKey",
  "logger\\.",
  "pytest\\.skip",
]
